# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Verify

on:
  pull_request:
    branches: [ "main" ]

jobs:

  test:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: 1
          SA_PASSWORD: MasadNetunim12!@
        ports:
          - 1433:1433
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: MasadNetunim12!@
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
      mongodb:
        image: mongo:8
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: evdb
        options: >-
          --name mongodb-event-source
          --health-cmd="echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=40s
        # command: mongod --bind_ip_all --quiet --logpath /dev/null --replSet rs0

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    # - name: Wait for MongoDB service to be healthy
    #   run: |
    #     for i in {1..10}; do
    #       if echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet | grep -q 1; then
    #         echo "MongoDB is healthy!"
    #         exit 0
    #       fi
    #       echo "Waiting for MongoDB..."
    #       sleep 5
    #     done
    #     echo "MongoDB did not become healthy in time."
    #     exit 1
    # 
    - name: Restart MongoDB with replica set enabled
      run: |
        echo "Killing default mongod process..."
        docker exec mongodb-event-source pkill mongod || true
        sleep 2
        echo "Starting mongod with replica set configuration..."
        # Restart mongod with the --replSet flag in the background
        docker exec -d mongodb-event-source mongod --bind_ip_all --quiet --logpath /dev/null --replSet rs0
        sleep 5

    - name: Initiate Replica Set
      run: |
        echo "Initiating replica set..."
        docker exec mongodb-event-source mongosh localhost:27017 --eval 'rs.initiate({_id:"rs0", members:[{_id:0, host:"localhost:27017"}]})'
        # Optionally, wait for the replica set to be fully initialized:
        for i in {1..10}; do
          if docker exec mongodb-event-source mongosh localhost:27017 --eval 'JSON.stringify(rs.status())' | grep -q '"ok" : 1'; then
            echo "Replica set is ready!"
            exit 0
          fi
          echo "Waiting for replica set initialization..."
          sleep 5
        done
        echo "Replica set failed to initialize."
        exit 1

    # Execute all unit tests in the solution
    - name: Execute unit tests
      working-directory: ./Tests/EvDb.UnitTests
      run: dotnet test --filter Category!=Stress

    # Execute all Integration tests in the solution
    - name: Execute Integration tests
      working-directory: ./Tests/EvDb.IntegrationTests
      run: dotnet test --filter Category!=Stress

